{
  "address": "0x2E9d8A6c168054B297724Ff5137576e8B47aA013",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PollContract_AlreadyVotedInPoll",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "PollContract_NeededBiggerClosesAtDate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PollContract_NotEnoughOptionsProvided",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PollContract_PollIsClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PollContract_WrongAmountOfOptionsProvided",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "voteId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pollId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "optionId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pollId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberOfVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct PollContract.Option[]",
              "name": "optionsVoted",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct PollContract.Vote",
          "name": "newVote",
          "type": "tuple"
        }
      ],
      "name": "NewVoteInPoll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "allowMultipleOptionsSelected",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closesAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "numberOfOptions",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct PollContract.Poll",
          "name": "pollCreated",
          "type": "tuple"
        }
      ],
      "name": "PollCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_allowMultipleOptionsSelected",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_closesAt",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "_options",
          "type": "string[]"
        }
      ],
      "name": "createPoll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "getMyVoteInPoll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "voteId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pollId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "optionId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pollId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberOfVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct PollContract.Option[]",
              "name": "optionsVoted",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PollContract.Vote",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "getPollById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "allowMultipleOptionsSelected",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closesAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "numberOfOptions",
              "type": "uint256"
            }
          ],
          "internalType": "struct PollContract.Poll",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "optionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pollId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfVotes",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct PollContract.Option[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "getPollVotes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "voteId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pollId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "optionId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pollId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numberOfVotes",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct PollContract.Option[]",
              "name": "optionsVoted",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PollContract.Vote[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPolls",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "allowMultipleOptionsSelected",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closesAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "numberOfOptions",
              "type": "uint256"
            }
          ],
          "internalType": "struct PollContract.Poll[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPollsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "optionsVotedIds",
          "type": "uint256[]"
        }
      ],
      "name": "votePoll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe03086cdf1ce42e4b82624a2b65fe1dca1534ae92b98f1305b011bf7af524aca",
  "receipt": {
    "to": null,
    "from": "0x886Fdaae1Bb0Dd3f802E6E20fa1B3243A18d1f15",
    "contractAddress": "0x2E9d8A6c168054B297724Ff5137576e8B47aA013",
    "transactionIndex": 85,
    "gasUsed": "1571463",
    "logsBloom": "0x
    "blockHash": "0x9c856b62f19381bafd8711ba6c6a9a3a9e2e3a923d09796e022f903335ecf34c",
    "transactionHash": "0xe03086cdf1ce42e4b82624a2b65fe1dca1534ae92b98f1305b011bf7af524aca",
    "logs": [],
    "blockNumber": 5020505,
    "cumulativeGasUsed": "15767680",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0c34c8fcdace96168632fe92a856501b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PollContract_AlreadyVotedInPoll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"PollContract_NeededBiggerClosesAtDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PollContract_NotEnoughOptionsProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PollContract_PollIsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PollContract_WrongAmountOfOptionsProvided\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfVotes\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct PollContract.Option[]\",\"name\":\"optionsVoted\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct PollContract.Vote\",\"name\":\"newVote\",\"type\":\"tuple\"}],\"name\":\"NewVoteInPoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"allowMultipleOptionsSelected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closesAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfOptions\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PollContract.Poll\",\"name\":\"pollCreated\",\"type\":\"tuple\"}],\"name\":\"PollCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_allowMultipleOptionsSelected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_closesAt\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_options\",\"type\":\"string[]\"}],\"name\":\"createPoll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"getMyVoteInPoll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfVotes\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct PollContract.Option[]\",\"name\":\"optionsVoted\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PollContract.Vote\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"getPollById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"allowMultipleOptionsSelected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closesAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfOptions\",\"type\":\"uint256\"}],\"internalType\":\"struct PollContract.Poll\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfVotes\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct PollContract.Option[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"getPollVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfVotes\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct PollContract.Option[]\",\"name\":\"optionsVoted\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PollContract.Vote[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPolls\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"allowMultipleOptionsSelected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closesAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfOptions\",\"type\":\"uint256\"}],\"internalType\":\"struct PollContract.Poll[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPollsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"optionsVotedIds\",\"type\":\"uint256[]\"}],\"name\":\"votePoll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PollContract.sol\":\"PollContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/PollContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.2 <0.9.0;\\r\\n\\r\\nerror PollContract_NotEnoughOptionsProvided();\\r\\nerror PollContract_NeededBiggerClosesAtDate(uint256 receivedTime, uint256 blockTimestamp);\\r\\nerror PollContract_AlreadyVotedInPoll();\\r\\nerror PollContract_PollIsClosed();\\r\\nerror PollContract_PollIsOpen();\\r\\nerror PollContract_WrongAmountOfOptionsProvided();\\r\\n\\r\\ncontract PollContract {\\r\\n    struct Option {\\r\\n        uint256 optionId;\\r\\n        uint256 pollId;\\r\\n        uint256 numberOfVotes;\\r\\n        string name;\\r\\n    }\\r\\n\\r\\n    struct Vote {\\r\\n        uint256 voteId;\\r\\n        uint256 pollId;\\r\\n        address voter;\\r\\n        Option[] optionsVoted;\\r\\n    }\\r\\n\\r\\n    struct Poll {\\r\\n        uint256 id;\\r\\n        string name;\\r\\n        string description;\\r\\n        bool allowMultipleOptionsSelected;\\r\\n        uint256 createdAt;\\r\\n        uint256 closesAt;\\r\\n        address creator;\\r\\n        uint256 numberOfOptions;\\r\\n    }\\r\\n\\r\\n    event PollCreated(Poll pollCreated);\\r\\n    event NewVoteInPoll(Vote newVote);\\r\\n\\r\\n    uint256 private pollsCount;\\r\\n    // poll id\\r\\n    mapping(uint256 => Poll) private polls;\\r\\n    //address (voter) => pollId\\r\\n    mapping(address => mapping(uint256 => Vote)) private globalVotesByAddress;\\r\\n    // poll id => option id\\r\\n    mapping(uint256 => mapping(uint256 => Option)) private pollOptions;\\r\\n    // poll id => voteId\\r\\n    mapping(uint256 => mapping(uint256 => Vote)) private pollVotes;\\r\\n    // poll id\\r\\n    mapping(uint256 => uint256) amountOfVotesInPoll;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function createPoll(\\r\\n        string calldata _name,\\r\\n        string calldata _description,\\r\\n        bool _allowMultipleOptionsSelected,\\r\\n        uint256 _closesAt,\\r\\n        string[] calldata _options\\r\\n    ) external payable {\\r\\n        uint256 aproxCurrentTime = block.timestamp;\\r\\n        if (_closesAt < aproxCurrentTime) {\\r\\n            revert PollContract_NeededBiggerClosesAtDate(_closesAt, aproxCurrentTime);\\r\\n        }\\r\\n        if (_options.length < 2) {\\r\\n            revert PollContract_NotEnoughOptionsProvided();\\r\\n        }\\r\\n\\r\\n        uint256 newPollId = pollsCount;\\r\\n        Poll storage newPoll = polls[newPollId];\\r\\n\\r\\n        newPoll.id = newPollId;\\r\\n        newPoll.name = _name;\\r\\n        newPoll.description = _description;\\r\\n        newPoll.allowMultipleOptionsSelected = _allowMultipleOptionsSelected;\\r\\n        newPoll.createdAt = aproxCurrentTime;\\r\\n        newPoll.closesAt = _closesAt;\\r\\n        newPoll.creator = msg.sender;\\r\\n\\r\\n        newPoll.numberOfOptions = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _options.length; i++) {\\r\\n            pollOptions[newPollId][i] = Option(i, newPollId, 0, _options[i]);\\r\\n            newPoll.numberOfOptions++;\\r\\n        }\\r\\n\\r\\n        pollsCount++;\\r\\n\\r\\n        emit PollCreated(newPoll);\\r\\n    }\\r\\n\\r\\n    function votePoll(uint256 _pollId, uint256[] calldata optionsVotedIds) external payable {\\r\\n        // checking that sender did not already vote in poll\\r\\n\\r\\n        Poll storage poll = polls[_pollId];\\r\\n        address addressForCheck = globalVotesByAddress[msg.sender][_pollId].voter;\\r\\n\\r\\n        if (addressForCheck != address(0)) {\\r\\n            revert PollContract_AlreadyVotedInPoll();\\r\\n        }\\r\\n\\r\\n        if (poll.closesAt < block.timestamp) {\\r\\n            revert PollContract_PollIsClosed();\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            ((poll.allowMultipleOptionsSelected == false) && optionsVotedIds.length > 1) || (optionsVotedIds.length < 1)\\r\\n        ) {\\r\\n            revert PollContract_WrongAmountOfOptionsProvided();\\r\\n        }\\r\\n\\r\\n        Vote storage newVote = globalVotesByAddress[msg.sender][_pollId];\\r\\n\\r\\n        for (uint256 i = 0; i < optionsVotedIds.length; i++) {\\r\\n            Option storage optionVoted = pollOptions[_pollId][optionsVotedIds[i]];\\r\\n            newVote.optionsVoted.push(optionVoted);\\r\\n            optionVoted.numberOfVotes++;\\r\\n        }\\r\\n\\r\\n        newVote.pollId = _pollId;\\r\\n        newVote.voter = msg.sender;\\r\\n\\r\\n        pollVotes[_pollId][amountOfVotesInPoll[_pollId]] = newVote;\\r\\n\\r\\n        amountOfVotesInPoll[_pollId]++;\\r\\n\\r\\n        emit NewVoteInPoll(newVote);\\r\\n    }\\r\\n\\r\\n    function getPolls() public view returns (Poll[] memory) {\\r\\n        Poll[] memory mPolls = new Poll[](pollsCount);\\r\\n        for (uint256 i = 0; i < pollsCount; i++) {\\r\\n            Poll storage sPoll = polls[i];\\r\\n            mPolls[i] = sPoll;\\r\\n        }\\r\\n\\r\\n        return mPolls;\\r\\n    }\\r\\n\\r\\n    function getPollById(uint256 _pollId) public view returns (Poll memory, Option[] memory, uint256) {\\r\\n        Option[] memory mOptions = new Option[](polls[_pollId].numberOfOptions);\\r\\n\\r\\n        uint256 votesCount = amountOfVotesInPoll[_pollId];\\r\\n\\r\\n        for (uint256 i = 0; i < polls[_pollId].numberOfOptions; i++) {\\r\\n            Option storage sOption = pollOptions[_pollId][i];\\r\\n            mOptions[i] = sOption;\\r\\n        }\\r\\n        return (polls[_pollId], mOptions, votesCount);\\r\\n    }\\r\\n\\r\\n    function getPollsCount() public view returns (uint256) {\\r\\n        return pollsCount;\\r\\n    }\\r\\n\\r\\n    function getMyVoteInPoll(uint256 _pollId) public view returns (Vote memory) {\\r\\n        return globalVotesByAddress[msg.sender][_pollId];\\r\\n    }\\r\\n\\r\\n    function getPollVotes(uint256 _pollId) public view returns (Vote[] memory) {\\r\\n        uint256 votesCount = amountOfVotesInPoll[_pollId];\\r\\n        Vote[] memory mVotes = new Vote[](votesCount);\\r\\n        for (uint256 i = 0; i < votesCount; i++) {\\r\\n            mVotes[i] = pollVotes[_pollId][i];\\r\\n        }\\r\\n        return mVotes;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x498fb4bb3378505e9e1734d441ed96fc8fdaa28a56854ff8872a9e31f1c91803\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 66,
        "contract": "contracts/PollContract.sol:PollContract",
        "label": "pollsCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 71,
        "contract": "contracts/PollContract.sol:PollContract",
        "label": "polls",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Poll)54_storage)"
      },
      {
        "astId": 78,
        "contract": "contracts/PollContract.sol:PollContract",
        "label": "globalVotesByAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)37_storage))"
      },
      {
        "astId": 85,
        "contract": "contracts/PollContract.sol:PollContract",
        "label": "pollOptions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Option)26_storage))"
      },
      {
        "astId": 92,
        "contract": "contracts/PollContract.sol:PollContract",
        "label": "pollVotes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Vote)37_storage))"
      },
      {
        "astId": 96,
        "contract": "contracts/PollContract.sol:PollContract",
        "label": "amountOfVotesInPoll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Option)26_storage)dyn_storage": {
        "base": "t_struct(Option)26_storage",
        "encoding": "dynamic_array",
        "label": "struct PollContract.Option[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)37_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PollContract.Vote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Vote)37_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Option)26_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct PollContract.Option))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Option)26_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Vote)37_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct PollContract.Vote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Vote)37_storage)"
      },
      "t_mapping(t_uint256,t_struct(Option)26_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PollContract.Option)",
        "numberOfBytes": "32",
        "value": "t_struct(Option)26_storage"
      },
      "t_mapping(t_uint256,t_struct(Poll)54_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PollContract.Poll)",
        "numberOfBytes": "32",
        "value": "t_struct(Poll)54_storage"
      },
      "t_mapping(t_uint256,t_struct(Vote)37_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PollContract.Vote)",
        "numberOfBytes": "32",
        "value": "t_struct(Vote)37_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Option)26_storage": {
        "encoding": "inplace",
        "label": "struct PollContract.Option",
        "members": [
          {
            "astId": 19,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "optionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "pollId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "numberOfVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 25,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Poll)54_storage": {
        "encoding": "inplace",
        "label": "struct PollContract.Poll",
        "members": [
          {
            "astId": 39,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 41,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 43,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 45,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "allowMultipleOptionsSelected",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 47,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 49,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "closesAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 51,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "creator",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 53,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "numberOfOptions",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Vote)37_storage": {
        "encoding": "inplace",
        "label": "struct PollContract.Vote",
        "members": [
          {
            "astId": 28,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "voteId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 30,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "pollId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 32,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "voter",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 36,
            "contract": "contracts/PollContract.sol:PollContract",
            "label": "optionsVoted",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(Option)26_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}